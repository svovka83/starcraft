generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  username String @unique
  password String

  token String

  game Game?

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Game {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int   @unique

  nameOne String
  nameTwo String

  imageOne String
  imageTwo String

  manaOne Int @default(3)
  manaTwo Int @default(3)

  currentManaOne Int @default(3)
  currentManaTwo Int @default(3)

  shopOne ShopOne[]
  shopTwo ShopTwo[]

  battleOne BattleOne[]
  battleTwo BattleTwo[]

  fighterUpOne FighterUpOne?
  fighterUpTwo FighterUpTwo?

  fighterDownOne FighterDownOne?
  fighterDownTwo FighterDownTwo?

  workerOne Int @default(1)
  workerTwo Int @default(1)

  mineralsOne Int @default(10)
  mineralsTwo Int @default(10)

  mineOne Int @default(200)
  mineTwo Int @default(200)

  bossOne Int @default(30)
  bossTwo Int @default(30)

  turn Boolean @default(true)

  gameMode GameMode @default(COMPUTER)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model ShopOne {
  id Int @id @default(autoincrement())

  name   String
  image  String
  mana   Int
  health Int
  attack Int
  price  Int

  game   Game @relation(fields: [gameId], references: [id])
  gameId Int
}

model ShopTwo {
  id Int @id @default(autoincrement())

  name   String
  image  String
  mana   Int
  health Int
  attack Int
  price  Int

  game   Game @relation(fields: [gameId], references: [id])
  gameId Int
}

model BattleOne {
  id Int @id @default(autoincrement())

  name   String
  image  String
  mana   Int
  health Int
  attack Int
  price  Int

  game   Game? @relation(fields: [gameId], references: [id])
  gameId Int?
}

model BattleTwo {
  id Int @id @default(autoincrement())

  name   String
  image  String
  mana   Int
  health Int
  attack Int
  price  Int

  game   Game? @relation(fields: [gameId], references: [id])
  gameId Int?
}

model FighterUpOne {
  id Int @id

  name   String
  image  String
  mana   Int
  health Int
  attack Int
  price  Int

  game   Game? @relation(fields: [gameId], references: [id])
  gameId Int?  @unique
}

model FighterUpTwo {
  id Int @id

  name   String
  image  String
  mana   Int
  health Int
  attack Int
  price  Int

  game   Game? @relation(fields: [gameId], references: [id])
  gameId Int?  @unique
}

model FighterDownOne {
  id Int @id

  name   String
  image  String
  mana   Int
  health Int
  attack Int
  price  Int

  game   Game? @relation(fields: [gameId], references: [id])
  gameId Int?  @unique
}

model FighterDownTwo {
  id Int @id

  name   String
  image  String
  mana   Int
  health Int
  attack Int
  price  Int

  game   Game? @relation(fields: [gameId], references: [id])
  gameId Int?  @unique
}

model Category {
  id Int @id @default(autoincrement())

  name String @unique

  units Unit[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Unit {
  id Int @id @default(autoincrement())

  name   String
  image  String
  mana   Int
  health Int
  attack Int
  price  Int

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

enum GameMode {
  PLAYER
  COMPUTER
}
